{"ast":null,"code":"import _toConsumableArray from \"/Users/Rossella/Documents/GitHub/Jamming/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/Rossella/Documents/GitHub/Jamming/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Rossella/Documents/GitHub/Jamming/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Rossella/Documents/GitHub/Jamming/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Rossella/Documents/GitHub/Jamming/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Rossella/Documents/GitHub/Jamming/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/Rossella/Documents/GitHub/Jamming/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/Rossella/Documents/GitHub/Jamming/src/Components/App/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      searchResults: [],\n      playlistName: \"My playlist\",\n      playlistTracks: []\n    };\n    _this.addTrack = _this.addTrack.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.removeTrack = _this.removeTrack.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updatePlaylistName = _this.updatePlaylistName.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.savePlaylist = _this.savePlaylist.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.search = _this.search.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"addTrack\",\n    value: function addTrack(track) {\n      if (this.state.playlistTracks.find(function (savedTrack) {\n        return savedTrack.id === track.id;\n      })) {\n        return;\n      } else {\n        //makes a copy of the playlist we have in the state and then assigns the value of playlistTracks to that playlist + the new track\n        var copy = this.state.playlistTracks;\n        this.setState({\n          playlistTracks: _toConsumableArray(copy).concat([track])\n        });\n      }\n    }\n  }, {\n    key: \"removeTrack\",\n    value: function removeTrack(track) {\n      this.setState({\n        playlistTracks: this.state.playlistTracks.filter(function (savedTrack) {\n          return savedTrack.id !== track.id;\n        })\n      });\n    } // Function that takes the value of the input box [in the playlist component]\n    //and sets the state of the playlist name to this value\n\n  }, {\n    key: \"updatePlaylistName\",\n    value: function updatePlaylistName(name) {\n      this.setState({\n        playlistName: name\n      });\n    }\n  }, {\n    key: \"savePlaylist\",\n    value: function savePlaylist() {\n      var _this2 = this;\n\n      var trackURIs = [];\n      this.state.playlistTracks.forEach(function (track) {\n        return trackURIs.push(track.uri);\n      });\n      Spotify.savePlaylist(this.state.playlistName, trackURIs).then(function () {\n        _this2.setState({\n          playlistName: 'My Playlist',\n          playlistTracks: []\n        });\n      });\n      return trackURIs;\n    }\n  }, {\n    key: \"search\",\n    value: function search(term) {\n      var _this3 = this;\n\n      Spotify.search(term).then(function (searchResults) {\n        return _this3.setState({\n          searchResults: searchResults\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"Ja\", React.createElement(\"span\", {\n        className: \"highlight\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, \"mmm\"), \"ing\"), React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(SearchBar, {\n        onSearch: this.search,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"App-playlist\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(SearchResults, {\n        searchResults: this.state.searchResults,\n        onAdd: this.addTrack,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }), React.createElement(Playlist, {\n        searchResults: this.state.searchResults,\n        playlistName: this.state.playlistName,\n        playlistTracks: this.state.playlistTracks,\n        onRemove: this.removeTrack,\n        onNameChange: this.updatePlaylistName,\n        onSave: this.savePlaylist,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/Rossella/Documents/GitHub/Jamming/src/Components/App/App.js"],"names":["React","Component","SearchBar","SearchResults","Playlist","Spotify","App","props","state","searchResults","playlistName","playlistTracks","addTrack","bind","removeTrack","updatePlaylistName","savePlaylist","search","track","find","savedTrack","id","copy","setState","filter","name","trackURIs","forEach","push","uri","then","term"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n       playlistName: \"My playlist\",\n       playlistTracks: []\n  };\n  this.addTrack = this.addTrack.bind(this);\n  this.removeTrack = this.removeTrack.bind(this);\n  this.updatePlaylistName = this.updatePlaylistName.bind(this);\n  this.savePlaylist = this.savePlaylist.bind(this);\n  this.search = this.search.bind(this);\n}\n\n  addTrack(track){\n    if (this.state.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\n    return;\n  }\n  else {\n    //makes a copy of the playlist we have in the state and then assigns the value of playlistTracks to that playlist + the new track\n    let copy = this.state.playlistTracks;\n    this.setState({playlistTracks: [...copy, track]});\n  }\n  }\n\n  removeTrack(track) {\n    this.setState({\n      playlistTracks: this.state.playlistTracks.filter(savedTrack => savedTrack.id !== track.id)\n    });\n  }\n\n// Function that takes the value of the input box [in the playlist component]\n//and sets the state of the playlist name to this value\n  updatePlaylistName(name) {\n    this.setState({playlistName: name})\n  }\n\n  savePlaylist() {\n    const trackURIs = [];\n    this.state.playlistTracks.forEach(track => trackURIs.push(track.uri));\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\n      this.setState({\n        playlistName: 'My Playlist',\n        playlistTracks: []\n      })\n    })\n    return trackURIs;\n  }\n\n  search(term) {\n    Spotify.search(term).then(\n      searchResults => this.setState({\n        searchResults: searchResults\n      }));\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n            <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n        {/*This displays the search results and allows the user to add to the playlist*/}\n            <SearchResults searchResults={this.state.searchResults}\n                           onAdd={this.addTrack}\n                           />\n                           {/*This displays the playlist tracks and allows the user to remove songs from the playlist*/}\n            <Playlist searchResults={this.state.searchResults}\n                      playlistName={this.state.playlistName}\n                      playlistTracks={this.state.playlistTracks}\n                      onRemove={this.removeTrack}\n                      onNameChange={this.updatePlaylistName}\n                      onSave={this.savePlaylist}\n                      />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}