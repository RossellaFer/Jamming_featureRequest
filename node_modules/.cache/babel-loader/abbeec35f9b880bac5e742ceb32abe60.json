{"ast":null,"code":"var clientID = \"f9e87b59959d4119b791de8cb11adb35\";\nvar redirectURI = \"http://localhost:3000/\";\nvar spotifyUrl = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientID, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectURI);\nvar access_token;\nvar expires_in;\nvar Spotify = {\n  getAccessToken: function getAccessToken() {\n    if (access_token) {\n      return access_token;\n    }\n\n    var url = window.location.href;\n    var foundAccessToken = url.match(/access_token=([^&]*)/);\n    var foundExpiresIn = url.match(/expires_in=([^&]*)/);\n\n    if (foundAccessToken && foundExpiresIn) {\n      access_token = foundAccessToken[1];\n      expires_in = Number(foundExpiresIn[1]);\n      window.setTimeout(function () {\n        return access_token = '';\n      }, expires_in * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return access_token;\n    } else {\n      window.location = spotifyUrl;\n    }\n  },\n  savePlaylist: function savePlaylist(playlistName, trackURIs) {\n    if (!playlistName && !trackURIs) {\n      return;\n    }\n\n    var userAccessToken = Spotify.getAccessToken();\n    var headers = {\n      Authorization: \"Bearer \".concat(userAccessToken)\n    };\n    var userID = '';\n    var userEndpoint = \"https://api.spotify.com/v1/me\"; //getting the user ID from after logging into Spotify\n\n    return fetch(userEndpoint, {\n      headers: headers\n    }).then(function (response) {\n      return response.json();\n    }).then(function (jsonResponse) {\n      userID = jsonResponse.id; //after getting the id, make a post request for the new playlist\n\n      var playlistEndpoint = \"https://api.spotify.com/v1/users/\".concat(userID, \"/playlists\");\n      return fetch(playlistEndpoint, {\n        headers: headers,\n        method: \"POST\",\n        body: JSON.stringify({\n          name: playlistName\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (jsonResponse) {\n        var playlistID = jsonResponse.id; //after posting the playlist\n\n        return fetch(\"\".concat(playlistEndpoint, \"/\").concat(playlistID, \"/tracks\"), {\n          headers: headers,\n          method: \"POST\",\n          body: JSON.stringify({\n            uris: trackURIs\n          })\n        });\n      });\n    });\n  },\n  search: function search(searchTerm) {\n    var access_token = Spotify.getAccessToken();\n    var endpoint = \"https://api.spotify.com/v1/search?type=track&q=\".concat(searchTerm);\n    return fetch(endpoint, {\n      headers: {\n        Authorization: \"Bearer \".concat(access_token)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (jsonResponse) {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      debugger;\n      return jsonResponse.tracks.items.map(function (track) {\n        return {\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        };\n      });\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/Rossella/Documents/GitHub/Jamming/src/util/Spotify.js"],"names":["clientID","redirectURI","spotifyUrl","access_token","expires_in","Spotify","getAccessToken","url","window","location","href","foundAccessToken","match","foundExpiresIn","Number","setTimeout","history","pushState","savePlaylist","playlistName","trackURIs","userAccessToken","headers","Authorization","userID","userEndpoint","fetch","then","response","json","jsonResponse","id","playlistEndpoint","method","body","JSON","stringify","name","playlistID","uris","search","searchTerm","endpoint","tracks","items","map","track","artist","artists","album","uri"],"mappings":"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","sourcesContent":["const clientID = \"f9e87b59959d4119b791de8cb11adb35\";\nconst redirectURI = \"http://localhost:3000/\";\nconst spotifyUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\nlet access_token;\nlet expires_in;\n\n\nconst Spotify = {\n\n  getAccessToken() {\n    if (access_token) {\n      return access_token;\n    }\n    let url = window.location.href;\n    const foundAccessToken = url.match(/access_token=([^&]*)/);\n    const foundExpiresIn = url.match(/expires_in=([^&]*)/);\n\n    if(foundAccessToken && foundExpiresIn) {\n          access_token = foundAccessToken[1];\n          expires_in = Number(foundExpiresIn[1]);\n          window.setTimeout(() => access_token = '', expires_in * 1000);\n          window.history.pushState('Access Token', null, '/');\n          return access_token;\n    }\n    else {\n      window.location = spotifyUrl;\n    }\n  },\n\n  savePlaylist(playlistName, trackURIs) {\n    if(!playlistName && !trackURIs) {\n      return;\n    }\n    const userAccessToken = Spotify.getAccessToken();\n    const headers = {Authorization: `Bearer ${userAccessToken}`};\n    let userID = '';\n    const userEndpoint = \"https://api.spotify.com/v1/me\";\n\n    //getting the user ID from after logging into Spotify\n    return fetch(userEndpoint, {headers: headers}).then(response => {\n      return response.json();\n      }).then(jsonResponse => {\n        userID = jsonResponse.id;\n\n        //after getting the id, make a post request for the new playlist\n        let playlistEndpoint = `https://api.spotify.com/v1/users/${userID}/playlists`;\n        return fetch(playlistEndpoint, {\n          headers: headers,\n          method: \"POST\",\n          body: JSON.stringify({\n            name: playlistName\n          })\n          }).then(response => {\n            return response.json();\n          }).then(jsonResponse => {\n            let playlistID = jsonResponse.id;\n\n\n            //after posting the playlist\n            return fetch(`${playlistEndpoint}/${playlistID}/tracks`, {\n              headers: headers,\n              method: \"POST\",\n              body: JSON.stringify({uris: trackURIs})\n            });\n        })\n     })\n  },\n\nsearch(searchTerm) {\n  const access_token = Spotify.getAccessToken();\n  const endpoint = `https://api.spotify.com/v1/search?type=track&q=${searchTerm}`;\n  return fetch(endpoint, {headers: {\n    Authorization: `Bearer ${access_token}`\n  }}).then(response => {\n    return response.json();\n  }).then(jsonResponse => {\n    if(!jsonResponse.tracks){\n        return [];\n      }\n      debugger;\n    return jsonResponse.tracks.items.map(track => ({\n      id: track.id,\n      name: track.name,\n      artist: track.artists[0].name,\n      album: track.album.name,\n      uri: track.uri\n    }));\n  })\n}\n\n}\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}