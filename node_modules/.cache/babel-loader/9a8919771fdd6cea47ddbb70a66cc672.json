{"ast":null,"code":"var clientID = \"f9e87b59959d4119b791de8cb11adb35\";\nvar redirectURI = \"http://localhost:3000/\";\nvar spotifyUrl = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientID, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectURI);\nvar access_token;\nvar Spotify = {\n  getAccessToken: function getAccessToken() {\n    if (access_token) {\n      return access_token;\n    }\n\n    var url = window.location.href;\n    var foundAccessToken = url.match(/access_token=([^&]*)/);\n    var foundExpiresIn = url.match(/expires_in=([^&]*)/);\n\n    if (foundAccessToken && foundExpiresIn) {\n      access_token = foundAccessToken[1];\n      var expires_in = Number(foundExpiresIn[1]);\n      window.setTimeout(function () {\n        return access_token = '';\n      }, foundExpiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return access_token;\n    } else {\n      window.location = spotifyUrl;\n      return access_token;\n    }\n  },\n  savePlaylist: function savePlaylist(playlistName, trackURIs) {\n    if (!playListName && !trackURIs) {\n      return;\n    }\n\n    var userAccessToken = Spotify.getAccessToken();\n    var headers = {\n      Authorization: \"Bearer \".concat(userAccessToken)\n    };\n    var userID = '';\n  },\n  search: function search(searchTerm) {\n    var access_token = Spotify.getAccessToken();\n    var endpoint = \"https://api.spotify.com/v1/search?type=track&q=\".concat(searchTerm);\n    return fetch(endpoint, {\n      headers: {\n        Authorization: \"Bearer \".concat(access_token)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (jsonResponse) {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(function (track) {\n        return {\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri\n        };\n      });\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/Rossella/Documents/GitHub/Jamming/src/util/Spotify.js"],"names":["clientID","redirectURI","spotifyUrl","access_token","Spotify","getAccessToken","url","window","location","href","foundAccessToken","match","foundExpiresIn","expires_in","Number","setTimeout","history","pushState","savePlaylist","playlistName","trackURIs","playListName","userAccessToken","headers","Authorization","userID","search","searchTerm","endpoint","fetch","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri"],"mappings":"AAAA,IAAMA,QAAQ,GAAG,kCAAjB;AACA,IAAMC,WAAW,GAAG,wBAApB;AACA,IAAMC,UAAU,8DAAuDF,QAAvD,4EAAiIC,WAAjI,CAAhB;AACA,IAAIE,YAAJ;AAGA,IAAMC,OAAO,GAAG;AAEdC,EAAAA,cAFc,4BAEG;AACf,QAAIF,YAAJ,EAAkB;AAChB,aAAOA,YAAP;AACD;;AACD,QAAIG,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAA1B;AACA,QAAMC,gBAAgB,GAAGJ,GAAG,CAACK,KAAJ,CAAU,sBAAV,CAAzB;AACA,QAAMC,cAAc,GAAGN,GAAG,CAACK,KAAJ,CAAU,oBAAV,CAAvB;;AAEA,QAAGD,gBAAgB,IAAIE,cAAvB,EAAuC;AACjCT,MAAAA,YAAY,GAAGO,gBAAgB,CAAC,CAAD,CAA/B;AACA,UAAIG,UAAU,GAAGC,MAAM,CAACF,cAAc,CAAC,CAAD,CAAf,CAAvB;AACAL,MAAAA,MAAM,CAACQ,UAAP,CAAkB;AAAA,eAAMZ,YAAY,GAAG,EAArB;AAAA,OAAlB,EAA2CS,cAAc,GAAG,IAA5D;AACAL,MAAAA,MAAM,CAACS,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C;AACA,aAAOd,YAAP;AACL,KAND,MAOK;AACHI,MAAAA,MAAM,CAACC,QAAP,GAAkBN,UAAlB;AACA,aAAOC,YAAP;AACD;AACF,GArBa;AAuBde,EAAAA,YAvBc,wBAuBDC,YAvBC,EAuBaC,SAvBb,EAuBwB;AACpC,QAAG,CAACC,YAAD,IAAiB,CAACD,SAArB,EAAgC;AAC9B;AACD;;AACD,QAAME,eAAe,GAAGlB,OAAO,CAACC,cAAR,EAAxB;AACA,QAAMkB,OAAO,GAAG;AAACC,MAAAA,aAAa,mBAAYF,eAAZ;AAAd,KAAhB;AACA,QAAMG,MAAM,GAAG,EAAf;AAED,GA/Ba;AAiChBC,EAAAA,MAjCgB,kBAiCTC,UAjCS,EAiCG;AACjB,QAAMxB,YAAY,GAAGC,OAAO,CAACC,cAAR,EAArB;AACA,QAAMuB,QAAQ,4DAAqDD,UAArD,CAAd;AACA,WAAOE,KAAK,CAACD,QAAD,EAAW;AAACL,MAAAA,OAAO,EAAE;AAC/BC,QAAAA,aAAa,mBAAYrB,YAAZ;AADkB;AAAV,KAAX,CAAL,CAEH2B,IAFG,CAEE,UAAAC,QAAQ,EAAI;AACnB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAJM,EAIJF,IAJI,CAIC,UAAAG,YAAY,EAAI;AACtB,UAAG,CAACA,YAAY,CAACC,MAAjB,EAAwB;AACpB,eAAO,EAAP;AACD;;AACH,aAAOD,YAAY,CAACC,MAAb,CAAoBC,KAApB,CAA0BC,GAA1B,CAA8B,UAAAC,KAAK;AAAA,eAAK;AAC7CC,UAAAA,EAAE,EAAED,KAAK,CAACC,EADmC;AAE7CC,UAAAA,IAAI,EAAEF,KAAK,CAACE,IAFiC;AAG7CC,UAAAA,MAAM,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,EAAiBF,IAHoB;AAI7CG,UAAAA,KAAK,EAAEL,KAAK,CAACK,KAAN,CAAYH,IAJ0B;AAK7CI,UAAAA,GAAG,EAAEN,KAAK,CAACM;AALkC,SAAL;AAAA,OAAnC,CAAP;AAOD,KAfM,CAAP;AAgBD;AApDe,CAAhB;AAwDA,eAAevC,OAAf","sourcesContent":["const clientID = \"f9e87b59959d4119b791de8cb11adb35\";\nconst redirectURI = \"http://localhost:3000/\";\nconst spotifyUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\nlet access_token;\n\n\nconst Spotify = {\n\n  getAccessToken() {\n    if (access_token) {\n      return access_token;\n    }\n    let url = window.location.href;\n    const foundAccessToken = url.match(/access_token=([^&]*)/);\n    const foundExpiresIn = url.match(/expires_in=([^&]*)/);\n\n    if(foundAccessToken && foundExpiresIn) {\n          access_token = foundAccessToken[1];\n          let expires_in = Number(foundExpiresIn[1]);\n          window.setTimeout(() => access_token = '', foundExpiresIn * 1000);\n          window.history.pushState('Access Token', null, '/');\n          return access_token;\n    }\n    else {\n      window.location = spotifyUrl;\n      return access_token;\n    }\n  },\n\n  savePlaylist(playlistName, trackURIs) {\n    if(!playListName && !trackURIs) {\n      return;\n    }\n    const userAccessToken = Spotify.getAccessToken();\n    const headers = {Authorization: `Bearer ${userAccessToken}`};\n    const userID = '';\n\n  },\n\nsearch(searchTerm) {\n  const access_token = Spotify.getAccessToken();\n  const endpoint = `https://api.spotify.com/v1/search?type=track&q=${searchTerm}`;\n  return fetch(endpoint, {headers: {\n    Authorization: `Bearer ${access_token}`\n  }}).then(response => {\n    return response.json();\n  }).then(jsonResponse => {\n    if(!jsonResponse.tracks){\n        return [];\n      }\n    return jsonResponse.tracks.items.map(track => ({\n      id: track.id,\n      name: track.name,\n      artist: track.artists[0].name,\n      album: track.album.name,\n      uri: track.uri\n    }));\n  })\n}\n\n}\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}