{"ast":null,"code":"var clientID = \"f9e87b59959d4119b791de8cb11adb35\";\nvar redirectURI = \"http://localhost:3000/\";\nvar spotifyUrl = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientID, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectURI);\nvar access_token = \"\";\nvar expires_in = \"\";\nvar Spotify = {\n  getAccessToken: function getAccessToken() {\n    if (access_token) {\n      return access_token;\n    }\n\n    var url = window.location.href;\n    var foundAccessToken = url.match(/access_token=([^&]*)/);\n    var foundExpiresIn = url.match(/expires_in=([^&]*)/);\n\n    if (foundAccessToken && foundExpiresIn) {\n      access_token = foundAccessToken[1];\n      expires_in = Number(foundExpiresIn[1]);\n      window.setTimeout(function () {\n        return access_token = '';\n      }, expires_in * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return access_token;\n    } else {\n      window.location = spotifyUrl;\n    }\n  },\n  savePlaylist: function savePlaylist(playlistName, trackURIs) {\n    Spotify.getAccessToken();\n    var headers = {\n      Authorization: \"Bearer \".concat(access_token)\n    };\n    var userID = '';\n    var userEndpoint = \"https://api.spotify.com/v1/me\";\n\n    if (playlistName && trackURIs) {\n      //getting the user ID from after logging into Spotify\n      return fetch(userEndpoint, {\n        headers: headers\n      }).then(function (response) {\n        return response.json();\n      }).then(function (jsonResponse) {\n        userID = jsonResponse.id; //after getting the id, make a post request for the new playlist\n\n        var playlistEndpoint = \"https://api.spotify.com/v1/users/\".concat(userID, \"/playlists\");\n        return fetch(playlistEndpoint, {\n          headers: headers,\n          method: \"POST\",\n          body: JSON.stringify({\n            name: playlistName\n          })\n        }).then(function (response) {\n          return response.json();\n        }).then(function (jsonResponse) {\n          var playlistID = jsonResponse.id; //after posting the playlist get the uris of the tracks included in the playlist\n\n          return fetch(\"\".concat(playlistEndpoint, \"/\").concat(playlistID, \"/tracks\"), {\n            headers: headers,\n            method: \"POST\",\n            body: JSON.stringify({\n              uris: trackURIs\n            })\n          });\n        });\n      });\n    } else {\n      return;\n    }\n  },\n  search: function search(searchTerm) {\n    getAccessToken();\n    var endpoint = \"https://api.spotify.com/v1/search?type=track&q=\".concat(searchTerm);\n    return fetch(endpoint, {\n      headers: {\n        Authorization: \"Bearer \".concat(access_token)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (jsonResponse) {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(function (track) {\n        return {\n          id: track.id,\n          name: track.name,\n          artist: track.artists[0].name,\n          album: track.album.name,\n          uri: track.uri,\n          preview: track.preview_url\n        };\n      });\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/Rossella/Documents/GitHub/Jamming/src/util/Spotify.js"],"names":["clientID","redirectURI","spotifyUrl","access_token","expires_in","Spotify","getAccessToken","url","window","location","href","foundAccessToken","match","foundExpiresIn","Number","setTimeout","history","pushState","savePlaylist","playlistName","trackURIs","headers","Authorization","userID","userEndpoint","fetch","then","response","json","jsonResponse","id","playlistEndpoint","method","body","JSON","stringify","name","playlistID","uris","search","searchTerm","endpoint","tracks","items","map","track","artist","artists","album","uri","preview","preview_url"],"mappings":"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","sourcesContent":["const clientID = \"f9e87b59959d4119b791de8cb11adb35\";\nconst redirectURI = \"http://localhost:3000/\";\nconst spotifyUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\nlet access_token = \"\";\nlet expires_in = \"\";\n\n\nconst Spotify = {\n\n  getAccessToken() {\n    if (access_token) {\n      return access_token;\n    }\n    let url = window.location.href;\n    const foundAccessToken = url.match(/access_token=([^&]*)/);\n    const foundExpiresIn = url.match(/expires_in=([^&]*)/);\n\n    if(foundAccessToken && foundExpiresIn) {\n          access_token = foundAccessToken[1];\n          expires_in = Number(foundExpiresIn[1]);\n          window.setTimeout(() => access_token = '', expires_in * 1000);\n\t\t\t    window.history.pushState('Access Token', null, '/');\n\t\t\treturn access_token;\n    }\n    else {\n      window.location = spotifyUrl;\n    }\n  },\n\n  savePlaylist(playlistName, trackURIs) {\n    Spotify.getAccessToken();\n    const headers = {Authorization: `Bearer ${access_token}`};\n    let userID = '';\n    const userEndpoint = \"https://api.spotify.com/v1/me\";\n\n    if(playlistName && trackURIs) {\n      //getting the user ID from after logging into Spotify\n      return fetch(userEndpoint, {headers: headers}).then(response => {\n          return response.json();\n        }).then(jsonResponse => {\n          userID = jsonResponse.id;\n\n          //after getting the id, make a post request for the new playlist\n          let playlistEndpoint = `https://api.spotify.com/v1/users/${userID}/playlists`;\n          return fetch(playlistEndpoint, {\n            headers: headers,\n            method: \"POST\",\n            body: JSON.stringify({\n              name: playlistName\n            })\n            }).then(response => {\n              return response.json();\n            }).then(jsonResponse => {\n              let playlistID = jsonResponse.id;\n\n\n              //after posting the playlist get the uris of the tracks included in the playlist\n              return fetch(`${playlistEndpoint}/${playlistID}/tracks`, {\n                headers: headers,\n                method: \"POST\",\n                body: JSON.stringify({uris: trackURIs})\n              });\n          })\n       })\n    }\n    else {\n      return;\n    }\n  },\n\nsearch(searchTerm) {\n  getAccessToken();\n  const endpoint = `https://api.spotify.com/v1/search?type=track&q=${searchTerm}`;\n  return fetch(endpoint, {headers: {\n    Authorization: `Bearer ${access_token}`\n  }}).then(response => {\n    return response.json();\n  }).then(jsonResponse => {\n    if(!jsonResponse.tracks){\n        return [];\n      }\n    return jsonResponse.tracks.items.map(track => ({\n      id: track.id,\n      name: track.name,\n      artist: track.artists[0].name,\n      album: track.album.name,\n      uri: track.uri,\n      preview: track.preview_url\n    }));\n  })\n}\n\n}\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}