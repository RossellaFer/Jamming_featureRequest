{"ast":null,"code":"import _readOnlyError from \"/Users/Rossella/Documents/GitHub/Jamming/node_modules/@babel/runtime/helpers/esm/readOnlyError\";\nvar clientID = \"f9e87b59959d4119b791de8cb11adb35\";\nvar redirectURI = \"http://localhost:3000/\";\nvar spotifyUrl = \"https://accounts.spotify.com/authorize?client_id=\".concat(clientID, \"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectURI);\nvar access_token;\nvar endpoint = \"https://api.spotify.com/v1/search?type=track&q=\";\nvar Spotify = {\n  getAccessToken: function getAccessToken() {\n    if (access_token) {\n      return access_token;\n    }\n\n    var url = window.location.href;\n    var foundAccessToken = url.match(/access_token=([^&]*)/);\n    var foundExpiresIn = url.match(/expires_in=([^&]*)/);\n\n    if (url.indexOf(foundAccessToken) > -1 && url.indexOf(foundExpiresIn)) {\n      access_token = foundAccessToken[1];\n      var expires_in = foundExpiresIn[1];\n      window.setTimeout(function () {\n        return foundAccessToken = (_readOnlyError(\"foundAccessToken\"), '');\n      }, foundExpiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n    } else {\n      window.location = spotifyUrl;\n    }\n  },\n  search: function search(searchTerm) {\n    return fetch(endpoint + searchTerm, {\n      headers: {\n        Authorization: \"Bearer \".concat(access_token)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (jsonResponse) {\n      return jsonResponse.map(function (track) {\n        return {\n          id: track.id,\n          name: track.name,\n          artist: track.artist[0].name,\n          album: track.album.name,\n          URI: track.uri\n        };\n      });\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/Rossella/Documents/GitHub/Jamming/src/util/Spotify.js"],"names":["clientID","redirectURI","spotifyUrl","access_token","endpoint","Spotify","getAccessToken","url","window","location","href","foundAccessToken","match","foundExpiresIn","indexOf","expires_in","setTimeout","history","pushState","search","searchTerm","fetch","headers","Authorization","then","response","json","jsonResponse","map","track","id","name","artist","album","URI","uri"],"mappings":";AAAA,IAAMA,QAAQ,GAAG,kCAAjB;AACA,IAAMC,WAAW,GAAG,wBAApB;AACA,IAAMC,UAAU,8DAAuDF,QAAvD,4EAAiIC,WAAjI,CAAhB;AACA,IAAIE,YAAJ;AACA,IAAMC,QAAQ,oDAAd;AAEA,IAAMC,OAAO,GAAG;AAEdC,EAAAA,cAFc,4BAEG;AACf,QAAIH,YAAJ,EAAkB;AAChB,aAAOA,YAAP;AACD;;AACD,QAAII,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAA1B;AACA,QAAMC,gBAAgB,GAAGJ,GAAG,CAACK,KAAJ,CAAU,sBAAV,CAAzB;AACA,QAAMC,cAAc,GAAGN,GAAG,CAACK,KAAJ,CAAU,oBAAV,CAAvB;;AAEA,QAAGL,GAAG,CAACO,OAAJ,CAAYH,gBAAZ,IAAgC,CAAC,CAAjC,IAAsCJ,GAAG,CAACO,OAAJ,CAAYD,cAAZ,CAAzC,EAAsE;AAChEV,MAAAA,YAAY,GAAGQ,gBAAgB,CAAC,CAAD,CAA/B;AACA,UAAII,UAAU,GAAGF,cAAc,CAAC,CAAD,CAA/B;AACAL,MAAAA,MAAM,CAACQ,UAAP,CAAkB;AAAA,eAAML,gBAAgB,wCAAG,EAAH,CAAtB;AAAA,OAAlB,EAA+CE,cAAc,GAAG,IAAhE;AACAL,MAAAA,MAAM,CAACS,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C;AACL,KALD,MAMK;AACHV,MAAAA,MAAM,CAACC,QAAP,GAAkBP,UAAlB;AACD;AACF,GAnBa;AAqBhBiB,EAAAA,MArBgB,kBAqBTC,UArBS,EAqBG;AACjB,WAAOC,KAAK,CAACjB,QAAQ,GAAGgB,UAAZ,EAAwB;AAACE,MAAAA,OAAO,EAAE;AAC5CC,QAAAA,aAAa,mBAAYpB,YAAZ;AAD+B;AAAV,KAAxB,CAAL,CAEHqB,IAFG,CAEE,UAAAC,QAAQ,EAAI;AACnB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KAJM,EAIJF,IAJI,CAIC,UAAAG,YAAY,EAAI;AACtB,aAAOA,YAAY,CAACC,GAAb,CAAiB,UAAAC,KAAK;AAAA,eAAK;AAChCC,UAAAA,EAAE,EAAED,KAAK,CAACC,EADsB;AAEhCC,UAAAA,IAAI,EAAEF,KAAK,CAACE,IAFoB;AAGhCC,UAAAA,MAAM,EAAEH,KAAK,CAACG,MAAN,CAAa,CAAb,EAAgBD,IAHQ;AAIhCE,UAAAA,KAAK,EAAEJ,KAAK,CAACI,KAAN,CAAYF,IAJa;AAKhCG,UAAAA,GAAG,EAAEL,KAAK,CAACM;AALqB,SAAL;AAAA,OAAtB,CAAP;AAOD,KAZM,CAAP;AAaD;AAnCe,CAAhB;AAuCA,eAAe9B,OAAf","sourcesContent":["const clientID = \"f9e87b59959d4119b791de8cb11adb35\";\nconst redirectURI = \"http://localhost:3000/\";\nconst spotifyUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\nlet access_token;\nconst endpoint = `https://api.spotify.com/v1/search?type=track&q=`;\n\nconst Spotify = {\n\n  getAccessToken() {\n    if (access_token) {\n      return access_token;\n    }\n    let url = window.location.href;\n    const foundAccessToken = url.match(/access_token=([^&]*)/);\n    const foundExpiresIn = url.match(/expires_in=([^&]*)/);\n\n    if(url.indexOf(foundAccessToken) > -1 && url.indexOf(foundExpiresIn)) {\n          access_token = foundAccessToken[1];\n          let expires_in = foundExpiresIn[1];\n          window.setTimeout(() => foundAccessToken = '', foundExpiresIn * 1000);\n          window.history.pushState('Access Token', null, '/');\n    }\n    else {\n      window.location = spotifyUrl;\n    }\n  },\n\nsearch(searchTerm) {\n  return fetch(endpoint + searchTerm, {headers: {\n    Authorization: `Bearer ${access_token}`\n  }}).then(response => {\n    return response.json();\n  }).then(jsonResponse => {\n    return jsonResponse.map(track => ({\n      id: track.id,\n      name: track.name,\n      artist: track.artist[0].name,\n      album: track.album.name,\n      URI: track.uri\n    }))\n  })\n}\n\n}\n\nexport default Spotify;\n"]},"metadata":{},"sourceType":"module"}